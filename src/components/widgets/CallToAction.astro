---
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { CallToAction, Widget} from '~/types';
import Headline from '~/components/ui/Headline.astro';
import Button from "~/components/ui/Button.astro"
import Image from '~/components/common/Image.astro';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  image? : string | any;
  alt? : string | any;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props as Props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div
    class="flex items-center max-w-6xl mx-auto text-center p-6 rounded-md shadow-g dark:shadow-none dark:border dark:border-slate-600"
  >
    { image && (
      <div class="basis-1/2">
          <div class="relative m-auto max-w-5xl">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="mx-auto rounded-md w-full"
                widths={[400, 768, 1024, 2040]}
                sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                loading="eager"
                width={600}
                height={600}
                {...image}
              />
            )}
          </div>
      </div> )
    }
    
    <div>
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={{
          container: 'mb-0 md:mb-0',
          title: 'text-4xl md:text-4xl font-bold leading-tighter mb-4 font-heading',
          subtitle: 'text-xl text-muted dark:text-slate-400',
        }}
      />
    
      {
        actions && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mt-6">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-0" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )
      }
    </div>
  </div>
</WidgetWrapper>
